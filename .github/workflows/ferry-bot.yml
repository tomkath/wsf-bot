name: WSF Ferry Bot

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  check-ferry:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install requests pyyaml beautifulsoup4
        
    - name: Create config file
      run: |
        cat > config.yml << EOF
        interval: 300
        requests:
        ${{ secrets.FERRY_CONFIG }}
        discord:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
        EOF
        
    - name: Run ferry bot
      run: |
        python << 'EOF'
        import requests
        import yaml
        import time
        import json
        from datetime import datetime
        
        # Load configuration
        with open('config.yml', 'r') as f:
            config = yaml.safe_load(f)
        
        def check_ferry_availability():
            print(f"Checking ferry availability at {datetime.now()}")
            
            for request in config['requests']:
                terminal_from = request['terminal_from']
                terminal_to = request['terminal_to']
                sailing_date = request['sailing_date']
                
                print(f"Checking {terminal_from} -> {terminal_to} on {sailing_date}")
                
                # WSF API endpoint (this is a simplified example)
                # You'll need to adapt this to the actual WSF booking system
                wsf_url = "https://www.wsdot.wa.gov/ferries/schedule"
                
                try:
                    # This is where you'd implement the actual ferry checking logic
                    # For now, we'll simulate checking
                    print(f"Simulating check for {terminal_from} to {terminal_to}")
                    
                    # If availability found (you'd implement real logic here):
                    availability_found = False  # Replace with real check
                    
                    if availability_found:
                        send_discord_notification(request)
                        
                except Exception as e:
                    print(f"Error checking ferry: {e}")
        
        def send_discord_notification(ferry_request):
            webhook_url = config['discord']['webhook']
            
            message = {
                "content": f"ðŸš¢ **Ferry Availability Found!**\n"
                          f"Route: {ferry_request['terminal_from']} â†’ {ferry_request['terminal_to']}\n"
                          f"Date: {ferry_request['sailing_date']}\n"
                          f"Time: {ferry_request['sailing_time_from']} - {ferry_request['sailing_time_to']}\n"
                          f"Visit: https://www.wsdot.wa.gov/ferries/schedule"
            }
            
            try:
                response = requests.post(webhook_url, json=message)
                if response.status_code == 204:
                    print("Discord notification sent successfully!")
                else:
                    print(f"Failed to send notification: {response.status_code}")
            except Exception as e:
                print(f"Error sending Discord message: {e}")
        
        # Run the check
        check_ferry_availability()
        EOF
